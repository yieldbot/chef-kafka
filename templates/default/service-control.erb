#!/bin/sh

# Setup basic path information.
MAIN="<%=@java_class%>"
LOG_OUT="<%=File.join(@log_dir,"process.out")%>"
LOG_ERR="<%=File.join(@log_dir,"process.err")%>"
HOME_DIR="<%=@install_dir%>"
JAVA_HOME="<%=@java_home%>"
SERVER_CONFIG="<%=@server_config%>"
KAFKA_HEAP_OPTS=="<%=@heap_opts%>"

base_dir=$(dirname $0)/..

# create logs directory
LOG_DIR=$base_dir/logs
if [ ! -d $LOG_DIR ]; then
	mkdir $LOG_DIR
fi

if [ -z "$SCALA_VERSION" ]; then
	SCALA_VERSION=2.8.0
fi

# run ./gradlew copyDependantLibs to get all dependant jars in a local dir
for file in $base_dir/core/build/dependant-libs-${SCALA_VERSION}/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/perf/build/libs//kafka-perf_${SCALA_VERSION}*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/clients/build/libs//kafka-clients*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/examples/build/libs//kafka-examples*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/contrib/hadoop-consumer/build/libs//kafka-hadoop-consumer*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/contrib/hadoop-producer/build/libs//kafka-hadoop-producer*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

# classpath addition for release
for file in $base_dir/libs/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/core/build/libs/kafka_${SCALA_VERSION}*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

# JMX settings
if [ -z "$KAFKA_JMX_OPTS" ]; then
  KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false "
fi

# JMX port to use
if [  $JMX_PORT ]; then
  KAFKA_JMX_OPTS="$KAFKA_JMX_OPTS -Dcom.sun.management.jmxremote.port=$JMX_PORT "
fi

# Log4j settings
if [ -z "$KAFKA_LOG4J_OPTS" ]; then
  KAFKA_LOG4J_OPTS="-Dlog4j.configuration=file:$base_dir/config/log4j.properties"
fi

KAFKA_LOG4J_OPTS="-Dkafka.logs.dir=$LOG_DIR $KAFKA_LOG4J_OPTS"

# Generic jvm settings you want to add
if [ -z "$KAFKA_OPTS" ]; then
  KAFKA_OPTS=""
fi

# Which java to use
if [ -z "$JAVA_HOME" ]; then
  JAVA="java"
else
  JAVA="$JAVA_HOME/bin/java"
fi

# Memory options
if [ -z "$KAFKA_HEAP_OPTS" ]; then
  KAFKA_HEAP_OPTS="-Xmx256M"
fi

# JVM performance options
if [ -z "$KAFKA_JVM_PERFORMANCE_OPTS" ]; then
  KAFKA_JVM_PERFORMANCE_OPTS="-server -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true"
fi

# GC options
GC_FILE_SUFFIX='-gc.log'
GC_LOG_FILE_NAME=''
if [ "x$GC_LOG_ENABLED" = "xtrue" ]; then
  GC_LOG_FILE_NAME=$DAEMON_NAME$GC_FILE_SUFFIX
  KAFKA_GC_LOG_OPTS="-Xloggc:$LOG_DIR/$GC_LOG_FILE_NAME -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps "
fi

# Create the JSVC command line.


# Find current PID if any.
FOUND_PID=`ps -ef |grep $MAIN |grep -v grep |awk '{print $2}'`

# Check what the caller wants.
case "$1" in
    start)
        if [ "" = "$FOUND_PID" ]; then
            cd   $HOME_DIR
            # For compatibility with runit we cannot backgroud
            # ourselves with a '&' at the end, though we do
            # need to exec.
            exec $JAVA $KAFKA_HEAP_OPTS $KAFKA_JVM_PERFORMANCE_OPTS $KAFKA_GC_LOG_OPTS $KAFKA_JMX_OPTS $KAFKA_LOG4J_OPTS -cp $CLASSPATH $KAFKA_OPTS $MAIN $SERVER_CONFIG <%=@kafka_opts || "" %>
        else
            echo "Service already running"
            exit 1
        fi
        ;;
    stop)
        if [ "" = "$FOUND_PID" ]; then
            echo "Service not running, nothing to stop"
            exit 1
        else
            kill $FOUND_PID
            sleep 4
            # Find PID again to see if we need to use kill -9 termination.
            FOUND_PID=`ps -ef |grep $MAIN |grep -v grep |awk '{print $2}'`
            if [ "" != "$FOUND_PID" ]; then
                echo "Using kill did not work, sending kill -9 to process"
                kill -9 $FOUND_PID
            fi
            exit 0
        fi
        ;;
    status)
        # Status is found via actual running processes, rather than
        # trusting the PID log file.
        if [ "" = "$FOUND_PID" ]; then
            echo "Not running"
            exit 1
        else
            echo "Running"
            exit 0
        fi
        ;;
    *)
        echo "usage: daemon {start|stop|status}" >&2
        exit 1
        ;;
esac
